/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function initialization(): void;
export function __wbg_universe_free(a: number): void;
export function universe_new(a: number, b: number): number;
export function universe_newOnWorker(a: number, b: number): number;
export function universe_appendCanvas(a: number, b: number, c: number): number;
export function universe_setEnable(a: number, b: number, c: number): void;
export function universe_setLayerAlpha(a: number, b: number, c: number, d: number): void;
export function universe_getLayerAlpha(a: number, b: number, c: number): number;
export function universe_setDisable(a: number, b: number, c: number): void;
export function universe_getEnable(a: number, b: number, c: number): number;
export function universe_setCurrentLayer(a: number, b: number, c: number, d: number): void;
export function universe_setPos(a: number, b: number, c: number, d: number, e: number): void;
export function universe_clear(a: number, b: number): void;
export function universe_clearLayer(a: number, b: number, c: number): void;
export function universe_layersLength(a: number): number;
export function universe_clearSelectCanvas(a: number, b: number): void;
export function universe_pointAntialias(a: number, b: number, c: number, d: number, e: number): void;
export function universe_pointWithPen(a: number, b: number, c: number, d: number): void;
export function universe_line(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function universe_lineAntialias(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function universe_lineWithPen(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function universe_rect(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function universe_pentagram(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function universe_polygram(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function universe_getBuffer(a: number): number;
export function universe_getBufferSelectCanvas(a: number, b: number): number;
export function universe_addLayer(a: number, b: number, c: number, d: number, e: number): void;
export function universe_getWidth(a: number): number;
export function universe_getHeight(a: number): number;
export function universe_fill(a: number, b: number, c: number, d: number): void;
export function universe_circle(a: number, b: number, c: number, d: number, e: number): void;
export function universe_circleAntialias(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function universe_ellipse(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function universe_ellipseAntialias(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function universe_quadraticCurve(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function universe_quadraticCurveAntialias(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number): void;
export function universe_bezierCurve(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function universe_bezierCurveAntialias(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function universe_bezierCurve3(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number): void;
export function universe_bezierCurve3Antialias(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number): void;
export function universe_drawPath(a: number, b: number, c: number, d: number): void;
export function universe_affineNew(a: number): void;
export function universe_affineAdd(a: number, b: number, c: number, d: number): void;
export function universe_affineRun(a: number, b: number, c: number, d: number): void;
export function universe_sharpness(a: number, b: number, c: number): void;
export function universe_filter(a: number, b: number, c: number, d: number, e: number): void;
export function universe_affineTest2(a: number, b: number, c: number, d: number, e: number): void;
export function universe_affineTest(a: number, b: number, c: number): void;
export function universe_imageLoader(a: number, b: number, c: number, d: number): void;
export function universe_nextFrame(a: number): number;
export function universe_imageDecoder(a: number, b: number, c: number, d: number): void;
export function universe_jpegDecoderSelectCanvas(a: number, b: number, c: number, d: number, e: number): void;
export function universe_bindCanvas(a: number, b: number, c: number): void;
export function universe_bindCanvas2(a: number, b: number, c: number): void;
export function universe_drawCanvas(a: number, b: number, c: number, d: number): void;
export function universe_drawSelectCanvas(a: number, b: number, c: number, d: number, e: number): void;
export function universe_getImageData(a: number, b: number, c: number): void;
export function universe_combine(a: number): void;
export function universe_isAnimation(a: number): number;
export function universe_drawCanvas2(a: number, b: number, c: number, d: number): void;
export function universe_drawSelectCanvas2(a: number, b: number, c: number, d: number, e: number): void;
export function universe_jpegDecoder(a: number, b: number, c: number, d: number): void;
export function __wbindgen_malloc(a: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number): number;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number): void;
export function __wbindgen_exn_store(a: number): void;
export function __wbindgen_start(): void;
